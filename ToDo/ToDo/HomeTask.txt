 
Задание на вторник

Написать API для реализации todo листа

Поля сущности todo: Id (int), Label (string), IsDone (bool), CreatedDate (DateTime), UpdatedDate (DateTime)

API должно содержать следующие методы:

GET /todos - получить все записи. Опционально принимать GET параметры limit (int), offset (int). Limit - максимально количество возвращаемых записей, offset - количество пропускаемых записей 

GET /todos/{id} - получить запись по Id

GET /todos/{id}/IsDone - получить флаг (вернуть json вида {id:1, IsDone: true})

POST /todos - создать новую запись, вернуть созданную запись с кодом ответа 201 и ссылкой на созданный ресурс. Сохранить время создание записи в UTC формате (DateTime.UtcNow)

PUT /todos/{id} - обновить запись, вернуть обновленную запись. Обновить поле UpdatedDate текущим UTC временем. Не обновлять поля CreatedDate и UpdatedDate данными от клиентской стороны 

PATCH /todos/{id}/IsDone - обновить поле IsDone у конкретной записи, запрос отправляет json вида {isDone:true}, ответ в виде {id:1, IsDone: true}

DELETE /todos/{id} - удалить запись 

Если при выполнении любого запроса, включающего в себя Id сущности, обнаруживается, что такой сущности нет, вернуть ответ 404. Хранить список можно в статическом поле типа List<Todo>. За основу можно взять шаблон web api с контроллерами 

============================
Задание на четверг:

Разделить приложение на несколько проектов:

Todos.Api - web api, содержит api для работы с todo
Todos.Service - библиотека, содержит сервисы для работы с Todo
Todos.Repositories -  библиотека, содержит репозитории для работы с Todo
Todos.Domain - библиотека, содержит сущность Todo

Users.Api -  web api, содержит api для работы с User
Users.Service - библиотека, содержит сервисы для работы с User

Common.Repositories -  библиотека, содержит репозитории для работы с User
Common.Domain -  библиотека, содержит сущность User

Реализовать соответствующие сервисы и репозитории. Использовать интерфейсы для связывания контроллеров, сервисов и репозиториев. 

Добавить в Todo поле OwnerId

При добавлении новой Todo или редактировании поля OwnerId проверять, что существует пользователь с таким Id. Если такого нет, вызвать исключение 

В метод GET /todos добавить фильтры по OwnerId (полное совпадение), LabelFreeText - частичное совпадение с игнорированием локали и регистра

==============================================
Дополнение к текущему заданию

Добавить DTO классы для методов добавления и редактирования сущностей в сервисах 
Добавить AutoMapper для копирования полей из DTO в Domain модель
Поменять конкретные реализации репозиторием на дженерики (файл репозитория и интерфейс прикрепляю)
Добавить заголовок x-Total-Count для GET /todos и  GET /users
Вынести инжектирование зависимостей бизнес логики в метод расширения, находящийся в проекте бизнес логики

==============================================
Добавить Fluent валидатор и Serilog

1. Установить Fluent в проекты бизнес логики. Необходимые библиотеки: FluentValidation и FluentValidation.DependencyInjectionExtensions
2. Добавить валидаторы для моделей Create и Update
3. Добавить автоматическое инжектирование в bl проекте: services.AddValidatorsFromAssemblies(new[] { Assembly.GetExecutingAssembly() }, includeInternalTypes: true);
4. Добавить фильтр для валидации запросов к контроллеру. Можно использовать библиотеку SharpGrip.FluentValidation.AutoValidation.Mvc (код для добавления сервиса    builder.Services.AddFluentValidationAutoValidation();)
5. Добавить легирование в api проект. Библиотека Serilog.AspNetCore
6. Обернуть код в program.cs в блок try, catch, finally. Залогировать исключения. Написать в лог сообщение о запуске приложения
7. Залагировать операции POST, PUT, PUTCH, DELET на уровне BL в коде сервисов. Сохранить в лог dto в json формате
